-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Дек 05 2024 г., 14:51
-- Версия сервера: 5.7.39-log
-- Версия PHP: 8.0.22

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `IT-BIRD-social`
--

-- --------------------------------------------------------

--
-- Структура таблицы `admin_logs`
--

CREATE TABLE `admin_logs` (
  `id` int(11) NOT NULL,
  `admin_id` int(11) NOT NULL,
  `action` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `chats`
--

CREATE TABLE `chats` (
  `id` int(11) NOT NULL,
  `user_id_1` int(11) NOT NULL,
  `user_id_2` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `chats`
--

INSERT INTO `chats` (`id`, `user_id_1`, `user_id_2`, `created_at`) VALUES
(1, 1, 2, '2024-12-03 18:12:23'),
(2, 1, 3, '2024-12-03 18:56:11'),
(3, 4, 1, '2024-12-03 21:16:55'),
(4, 4, 2, '2024-12-03 21:26:01'),
(5, 4, 3, '2024-12-03 21:29:24'),
(6, 9, 1, '2024-12-05 06:21:33'),
(7, 9, 3, '2024-12-05 06:58:54'),
(8, 9, 4, '2024-12-05 06:58:56'),
(9, 3, 2, '2024-12-05 07:01:21'),
(10, 1, 10, '2024-12-05 11:43:07');

-- --------------------------------------------------------

--
-- Структура таблицы `forums`
--

CREATE TABLE `forums` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `question` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `description` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `forums`
--

INSERT INTO `forums` (`id`, `user_id`, `question`, `created_at`, `description`, `status`) VALUES
(1, 1, 'test', '2024-12-05 08:30:15', 'testtesttest', 'Решён'),
(2, 1, 'dwdw', '2024-12-05 09:27:07', 'dwdw', 'Решён'),
(3, 1, 'dwdw', '2024-12-05 09:27:23', 'dwdw', 'Открыт'),
(4, 1, 'ввц', '2024-12-05 09:28:55', 'вцвц', 'Открыт'),
(5, 1, 'dwdwdw', '2024-12-05 07:44:22', 'dwwdwdw', 'Открыт'),
(6, 3, 'dwdw', '2024-12-05 07:45:10', 'dwdwdwdw', 'Открыт'),
(7, 3, 'ццв', '2024-12-05 07:50:44', 'вцвц', 'Открыт'),
(8, 3, 'вцвц', '2024-12-05 08:10:52', 'вцвцвц', 'Решён');

-- --------------------------------------------------------

--
-- Структура таблицы `forum_answers`
--

CREATE TABLE `forum_answers` (
  `id` int(11) NOT NULL,
  `forum_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `answer` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `forum_answers`
--

INSERT INTO `forum_answers` (`id`, `forum_id`, `user_id`, `answer`, `created_at`) VALUES
(1, 1, 3, 'wdwdw', '2024-12-05 09:16:27'),
(2, 1, 1, 'вцвц', '2024-12-05 09:21:09'),
(3, 1, 1, 'вцвц', '2024-12-05 09:21:24'),
(4, 7, 3, 'вцвцвц', '2024-12-05 09:50:51'),
(5, 6, 3, 'вцвц', '2024-12-05 09:54:05'),
(6, 2, 3, 'вцвц', '2024-12-05 10:10:47'),
(7, 5, 3, 'ткцфавцвц', '2024-12-05 10:11:16');

-- --------------------------------------------------------

--
-- Структура таблицы `hackathons`
--

CREATE TABLE `hackathons` (
  `id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text COLLATE utf8mb4_unicode_ci,
  `start_date` date NOT NULL,
  `end_date` date NOT NULL,
  `location` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `registration_link` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `organizer` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `status` enum('active','completed','upcoming') COLLATE utf8mb4_unicode_ci DEFAULT 'upcoming',
  `participants_limit` int(11) DEFAULT NULL,
  `tags` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `messages`
--

CREATE TABLE `messages` (
  `id` int(11) NOT NULL,
  `chat_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `message` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `messages`
--

INSERT INTO `messages` (`id`, `chat_id`, `user_id`, `message`, `created_at`) VALUES
(1, 1, 1, 'test', '2024-12-03 18:52:00'),
(2, 3, 4, 'Привет', '2024-12-03 21:21:04'),
(3, 3, 4, 'Привет', '2024-12-03 21:30:49'),
(4, 3, 4, 'Как дела?', '2024-12-03 21:30:55'),
(5, 3, 4, 'Не понял', '2024-12-03 21:31:15'),
(6, 3, 1, 'Привет, норм, у тя?', '2024-12-03 21:39:04'),
(7, 3, 1, 'Ладнооо', '2024-12-03 21:59:17'),
(8, 3, 1, 'цдцвлдцвждцж', '2024-12-03 22:08:37'),
(9, 1, 1, 'дцдцлвжвцд', '2024-12-03 22:08:45'),
(10, 1, 1, 'Ладно', '2024-12-03 22:08:47'),
(11, 1, 1, 'Хрен ', '2024-12-03 22:08:49'),
(12, 1, 1, 'С ним', '2024-12-03 22:08:50'),
(13, 1, 1, 'поойдет', '2024-12-03 22:08:52'),
(14, 2, 1, 'Привет', '2024-12-03 22:09:04'),
(15, 1, 1, 'а где', '2024-12-03 22:46:39'),
(16, 3, 1, 'цвцв', '2024-12-03 23:26:16'),
(17, 3, 1, 'вццвцв', '2024-12-03 23:26:16'),
(18, 3, 1, 'цвцввц', '2024-12-03 23:26:17'),
(19, 3, 1, 'вцвцвц', '2024-12-03 23:26:17'),
(20, 3, 1, 'цвцввццв', '2024-12-03 23:26:18'),
(21, 3, 1, 'цввццв', '2024-12-03 23:26:19'),
(22, 2, 1, 'Ehf', '2024-12-03 23:42:31'),
(23, 2, 1, 'Ура*', '2024-12-03 23:42:33'),
(24, 2, 1, 'Это теперь работает', '2024-12-03 23:42:38'),
(25, 2, 1, 'победа', '2024-12-03 23:42:40'),
(26, 2, 1, 'Ееееееее', '2024-12-03 23:42:43'),
(27, 1, 1, 'Ура, работает!!!!', '2024-12-03 23:42:57'),
(28, 1, 1, 'вцбвцлцвдцвц', '2024-12-04 04:46:57'),
(29, 6, 9, 'Привет', '2024-12-05 06:58:31'),
(30, 2, 3, 'Рил, это работает чтоли', '2024-12-05 06:59:16'),
(31, 2, 1, 'надо будет сделать чтобы уведомления о новых сообщениях приходили вне зависимости на какой странице находится пользователь', '2024-12-05 07:01:19'),
(32, 2, 3, 'победа', '2024-12-05 07:03:25'),
(33, 2, 1, 'est', '2024-12-05 08:59:14'),
(34, 2, 1, 'dwdw', '2024-12-05 08:59:22'),
(35, 2, 1, 'wd', '2024-12-05 08:59:22'),
(36, 2, 1, 'dw', '2024-12-05 08:59:23'),
(37, 2, 1, 'dw', '2024-12-05 08:59:23'),
(38, 2, 1, 'dwd', '2024-12-05 08:59:23'),
(39, 2, 1, 'dw', '2024-12-05 08:59:23'),
(40, 2, 1, 'dw', '2024-12-05 08:59:23'),
(41, 2, 1, 'wd', '2024-12-05 08:59:23'),
(42, 2, 1, 'dwwdwddw', '2024-12-05 08:59:24'),
(43, 2, 1, 'привет', '2024-12-05 09:04:44'),
(44, 2, 1, 'не понял', '2024-12-05 09:04:52'),
(45, 2, 1, 'вццв', '2024-12-05 09:05:31'),
(46, 2, 1, 'вцвц', '2024-12-05 09:05:39'),
(47, 2, 1, '1', '2024-12-05 09:07:34'),
(48, 2, 1, 'dwwdddwdw', '2024-12-05 09:07:42'),
(49, 2, 3, 'test', '2024-12-05 09:08:27'),
(50, 2, 3, 'test', '2024-12-05 09:08:56'),
(51, 2, 3, 'dwdwdw', '2024-12-05 09:09:03'),
(52, 2, 3, 'dwdwdw', '2024-12-05 09:09:10'),
(53, 2, 1, 'dwdwdw', '2024-12-05 09:09:19'),
(54, 2, 1, 'dwddw', '2024-12-05 09:09:33'),
(55, 2, 1, 'dwdwdw', '2024-12-05 09:09:40'),
(56, 2, 3, 'wdwdwdwdww', '2024-12-05 09:09:48'),
(57, 2, 3, 'dwddwdw', '2024-12-05 09:09:55'),
(58, 9, 3, 'test', '2024-12-05 09:13:32'),
(59, 2, 3, 'test', '2024-12-05 09:13:40'),
(60, 2, 1, 'test', '2024-12-05 09:13:52'),
(61, 2, 1, 'test', '2024-12-05 09:14:01'),
(62, 2, 1, 'test', '2024-12-05 09:14:04'),
(63, 2, 3, 'Привет', '2024-12-05 09:17:36'),
(64, 2, 3, 'вцвц', '2024-12-05 09:17:45'),
(65, 2, 3, 'вцвцвц', '2024-12-05 09:17:45'),
(66, 2, 3, 'вцвцв', '2024-12-05 09:17:46'),
(67, 2, 3, 'вц', '2024-12-05 09:17:46'),
(68, 2, 3, 'в', '2024-12-05 09:17:46'),
(69, 2, 3, 'вц', '2024-12-05 09:17:46'),
(70, 2, 3, 'вц', '2024-12-05 09:17:46'),
(71, 2, 3, 'ц', '2024-12-05 09:17:46'),
(72, 2, 3, 'вц', '2024-12-05 09:17:47'),
(73, 2, 3, 'вц', '2024-12-05 09:17:47'),
(74, 2, 3, 'вц', '2024-12-05 09:17:47'),
(75, 2, 3, 'вц', '2024-12-05 09:17:47'),
(76, 2, 3, 'вц', '2024-12-05 09:17:47'),
(77, 2, 3, 'вц', '2024-12-05 09:17:47'),
(78, 2, 3, 'вц', '2024-12-05 09:17:47'),
(79, 2, 3, 'вц', '2024-12-05 09:17:48'),
(80, 2, 3, 'цв', '2024-12-05 09:17:48'),
(81, 2, 3, 'цв', '2024-12-05 09:17:48'),
(82, 2, 3, 'вц', '2024-12-05 09:17:48'),
(83, 2, 3, 'вц', '2024-12-05 09:17:48'),
(84, 2, 3, 'вцвц', '2024-12-05 09:17:48'),
(85, 2, 3, 'вцвц', '2024-12-05 09:17:49'),
(86, 2, 3, 'вц', '2024-12-05 09:17:49'),
(87, 2, 3, 'цв', '2024-12-05 09:17:49'),
(88, 2, 3, 'в', '2024-12-05 09:17:49'),
(89, 2, 3, 'в', '2024-12-05 09:17:49'),
(90, 2, 3, 'вц', '2024-12-05 09:17:50'),
(91, 2, 3, 'вцвц', '2024-12-05 09:17:50'),
(92, 2, 3, 'вц', '2024-12-05 09:17:50'),
(93, 2, 3, 'вц', '2024-12-05 09:17:50'),
(94, 2, 3, 'цвц', '2024-12-05 09:17:50'),
(95, 2, 3, 'вц', '2024-12-05 09:17:51'),
(96, 2, 3, 'вц', '2024-12-05 09:17:51'),
(97, 2, 3, 'вц', '2024-12-05 09:17:51'),
(98, 2, 3, 'вц', '2024-12-05 09:17:51'),
(99, 2, 3, 'вц', '2024-12-05 09:17:51'),
(100, 2, 3, 'в', '2024-12-05 09:17:51'),
(101, 2, 3, 'цв', '2024-12-05 09:17:51'),
(102, 2, 3, 'цвв', '2024-12-05 09:17:52'),
(103, 2, 3, 'вц', '2024-12-05 09:17:52'),
(104, 2, 3, 'вц', '2024-12-05 09:17:52'),
(105, 2, 3, 'вц', '2024-12-05 09:17:52'),
(106, 2, 3, 'цв', '2024-12-05 09:17:52'),
(107, 2, 3, 'вц', '2024-12-05 09:17:53'),
(108, 2, 3, 'вц', '2024-12-05 09:17:53'),
(109, 2, 3, 'вц', '2024-12-05 09:17:53'),
(110, 2, 3, 'вц', '2024-12-05 09:17:53'),
(111, 2, 3, 'вц', '2024-12-05 09:17:53'),
(112, 2, 3, 'вц', '2024-12-05 09:17:53'),
(113, 2, 3, 'цв', '2024-12-05 09:17:54'),
(114, 2, 3, 'вц', '2024-12-05 09:17:54'),
(115, 2, 3, 'цв', '2024-12-05 09:17:54'),
(116, 2, 3, 'вц', '2024-12-05 09:17:54'),
(117, 2, 3, 'вц', '2024-12-05 09:17:54'),
(118, 2, 3, 'вц', '2024-12-05 09:17:55'),
(119, 2, 3, 'ццвв', '2024-12-05 09:17:55'),
(120, 2, 3, 'вц', '2024-12-05 09:17:55'),
(121, 2, 3, 'вц', '2024-12-05 09:17:55'),
(122, 2, 3, 'вц', '2024-12-05 09:17:55'),
(123, 2, 3, 'вц', '2024-12-05 09:17:56'),
(124, 2, 3, 'вцвцвц', '2024-12-05 09:17:56'),
(125, 2, 3, 'вц', '2024-12-05 09:17:56'),
(126, 2, 3, 'вц', '2024-12-05 09:17:56'),
(127, 2, 3, 'вц', '2024-12-05 09:17:57'),
(128, 2, 3, 'вц', '2024-12-05 09:17:57'),
(129, 2, 3, 'в', '2024-12-05 09:17:57'),
(130, 2, 3, 'в', '2024-12-05 09:17:57'),
(131, 2, 3, 'вц', '2024-12-05 09:17:57'),
(132, 2, 3, 'вц', '2024-12-05 09:17:57'),
(133, 2, 3, 'вц', '2024-12-05 09:17:58'),
(134, 2, 3, 'вц', '2024-12-05 09:17:58'),
(135, 2, 3, 'вцвц', '2024-12-05 09:17:58'),
(136, 2, 3, 'в', '2024-12-05 09:17:58'),
(137, 2, 3, 'в', '2024-12-05 09:17:58'),
(138, 2, 3, 'вц', '2024-12-05 09:17:59'),
(139, 2, 3, 'цв', '2024-12-05 09:17:59'),
(140, 2, 3, 'вц', '2024-12-05 09:17:59'),
(141, 2, 3, 'вц', '2024-12-05 09:17:59'),
(142, 2, 3, 'в', '2024-12-05 09:17:59'),
(143, 2, 3, 'в', '2024-12-05 09:17:59'),
(144, 2, 3, 'вц', '2024-12-05 09:18:00'),
(145, 2, 3, 'вц', '2024-12-05 09:18:00'),
(146, 2, 3, 'цв', '2024-12-05 09:18:00'),
(147, 2, 3, 'в', '2024-12-05 09:18:00'),
(148, 2, 3, 'вц', '2024-12-05 09:18:00'),
(149, 2, 3, 'вц', '2024-12-05 09:18:01'),
(150, 2, 3, 'вц', '2024-12-05 09:18:01'),
(151, 2, 3, 'вц', '2024-12-05 09:18:01'),
(152, 2, 3, 'вц', '2024-12-05 09:18:01'),
(153, 2, 3, 'вц', '2024-12-05 09:18:01'),
(154, 2, 3, 'цв', '2024-12-05 09:18:01'),
(155, 2, 3, 'ц', '2024-12-05 09:18:02'),
(156, 2, 3, 'цв', '2024-12-05 09:18:02'),
(157, 2, 3, 'ц', '2024-12-05 09:18:02'),
(158, 2, 3, 'вц', '2024-12-05 09:18:02'),
(159, 2, 3, 'цв', '2024-12-05 09:18:03'),
(160, 2, 3, 'в', '2024-12-05 09:18:03'),
(161, 2, 3, 'цв', '2024-12-05 09:18:03'),
(162, 2, 3, 'вцц', '2024-12-05 09:18:04'),
(163, 2, 3, 'вц', '2024-12-05 09:18:04'),
(164, 2, 3, 'в', '2024-12-05 09:18:04'),
(165, 2, 3, 'в', '2024-12-05 09:18:04'),
(166, 2, 3, 'цв', '2024-12-05 09:18:04'),
(167, 2, 3, 'цв', '2024-12-05 09:18:05'),
(168, 2, 3, 'вц', '2024-12-05 09:18:05'),
(169, 2, 3, 'ц', '2024-12-05 09:18:05'),
(170, 2, 3, 'вц', '2024-12-05 09:18:05'),
(171, 2, 3, 'в', '2024-12-05 09:18:05'),
(172, 2, 3, 'вц', '2024-12-05 09:18:06'),
(173, 2, 3, 'в', '2024-12-05 09:18:06'),
(174, 2, 3, 'цв', '2024-12-05 09:18:06'),
(175, 2, 3, 'в', '2024-12-05 09:18:06'),
(176, 2, 3, 'цв', '2024-12-05 09:18:06'),
(177, 2, 3, 'цввц', '2024-12-05 09:18:07'),
(178, 2, 3, 'вцвц', '2024-12-05 09:18:07'),
(179, 2, 3, 'ц', '2024-12-05 09:18:07'),
(180, 2, 3, 'вцв', '2024-12-05 09:18:08'),
(181, 2, 3, 'в', '2024-12-05 09:18:08'),
(182, 2, 3, 'ц', '2024-12-05 09:18:08'),
(183, 2, 3, 'в', '2024-12-05 09:18:08'),
(184, 2, 3, 'ц', '2024-12-05 09:18:08'),
(185, 2, 3, 'ц', '2024-12-05 09:18:08'),
(186, 2, 3, 'в', '2024-12-05 09:18:09'),
(187, 2, 3, 'ц', '2024-12-05 09:18:09'),
(188, 2, 3, 'ц', '2024-12-05 09:18:09'),
(189, 2, 3, 'цц', '2024-12-05 09:18:09'),
(190, 2, 3, 'ц', '2024-12-05 09:18:09'),
(191, 2, 3, 'ц', '2024-12-05 09:18:10'),
(192, 2, 3, 'ц', '2024-12-05 09:18:10'),
(193, 2, 3, 'ц', '2024-12-05 09:18:10'),
(194, 2, 3, 'ц', '2024-12-05 09:18:10'),
(195, 2, 3, 'ц', '2024-12-05 09:18:10'),
(196, 2, 3, 'ц', '2024-12-05 09:18:11'),
(197, 2, 3, 'ц', '2024-12-05 09:18:11'),
(198, 2, 3, 'ц', '2024-12-05 09:18:11'),
(199, 2, 3, 'ц', '2024-12-05 09:18:11'),
(200, 2, 3, 'ц', '2024-12-05 09:18:11'),
(201, 2, 3, 'ц', '2024-12-05 09:18:11'),
(202, 2, 3, 'ц', '2024-12-05 09:18:11'),
(203, 2, 3, 'ц', '2024-12-05 09:18:12'),
(204, 2, 3, 'ц', '2024-12-05 09:18:12'),
(205, 2, 3, 'бедный ден заспамили его', '2024-12-05 09:18:38'),
(206, 2, 1, 'вцвцвцвц', '2024-12-05 09:19:37'),
(207, 2, 3, 'пвцвцвц', '2024-12-05 09:42:22'),
(208, 2, 3, 'вцвцвц', '2024-12-05 09:42:30'),
(209, 2, 3, 'победа', '2024-12-05 09:43:04'),
(210, 2, 3, 'че прям рил крутая победа чтоли', '2024-12-05 09:43:11'),
(211, 2, 3, 'TEST CHEEEECK', '2024-12-05 09:45:41'),
(212, 2, 3, 'tttt', '2024-12-05 09:46:01'),
(213, 2, 1, 'ура победа', '2024-12-05 09:46:07'),
(214, 2, 3, 't', '2024-12-05 09:55:00'),
(215, 2, 3, 'kdkwdkdw', '2024-12-05 09:55:01'),
(216, 2, 3, 'kdldwldw', '2024-12-05 09:55:02'),
(217, 2, 3, 'dwldwldw[;pdw;l]dwd', '2024-12-05 09:55:02'),
(218, 2, 3, ']dwldqkwldqw', '2024-12-05 09:55:03'),
(219, 2, 3, 'dqw\\\'[dqw', '2024-12-05 09:55:03'),
(220, 2, 3, 'dq]qdqwd', '2024-12-05 09:55:04'),
(221, 2, 3, 'dqw', '2024-12-05 09:55:04'),
(222, 2, 3, 'dqw', '2024-12-05 09:55:04'),
(223, 2, 3, 'dqw', '2024-12-05 09:55:04'),
(224, 2, 3, 'dqw', '2024-12-05 09:55:05'),
(225, 2, 3, 'wdq', '2024-12-05 09:55:05'),
(226, 2, 3, 'dqw', '2024-12-05 09:55:05'),
(227, 2, 3, 'dqw', '2024-12-05 09:55:05'),
(228, 2, 3, 'd', '2024-12-05 09:55:05'),
(229, 2, 3, 'dqwd', '2024-12-05 09:55:06'),
(230, 2, 3, 'w', '2024-12-05 09:55:06'),
(231, 2, 3, 'qw', '2024-12-05 09:55:06'),
(232, 2, 3, 'dw', '2024-12-05 09:55:06'),
(233, 2, 3, 'dqw', '2024-12-05 09:55:07'),
(234, 2, 3, 'qw', '2024-12-05 09:55:07'),
(235, 2, 3, 'w', '2024-12-05 09:55:07'),
(236, 2, 3, 'wq', '2024-12-05 09:55:07'),
(237, 2, 3, 'dw', '2024-12-05 09:55:07'),
(238, 2, 3, 'dqw', '2024-12-05 09:55:07'),
(239, 2, 3, 'wdq', '2024-12-05 09:55:08'),
(240, 2, 3, 'qwd', '2024-12-05 09:55:08'),
(241, 2, 3, 'd', '2024-12-05 09:55:08'),
(242, 2, 3, 'd', '2024-12-05 09:55:08'),
(243, 2, 3, 'dw', '2024-12-05 09:55:08'),
(244, 2, 3, 'q', '2024-12-05 09:55:08'),
(245, 2, 3, 'q', '2024-12-05 09:55:08'),
(246, 2, 3, 'dwd', '2024-12-05 09:55:09'),
(247, 2, 3, 'd', '2024-12-05 09:55:09'),
(248, 2, 3, 'fkwkwlqw', '2024-12-05 09:55:10'),
(249, 2, 3, 'f\\]', '2024-12-05 09:55:10'),
(250, 2, 3, 'q', '2024-12-05 09:55:10'),
(251, 2, 3, 'd', '2024-12-05 09:55:10'),
(252, 2, 3, '\\qw', '2024-12-05 09:55:10'),
(253, 2, 3, 'wqd', '2024-12-05 09:55:10'),
(254, 2, 3, 'dqw\\qw', '2024-12-05 09:55:11'),
(255, 2, 3, '\\d', '2024-12-05 09:55:11'),
(256, 2, 3, '\\dqwdw', '2024-12-05 09:55:11'),
(257, 2, 3, 'qwdqw', '2024-12-05 09:55:12'),
(258, 2, 3, 'dw\\d', '2024-12-05 09:55:12'),
(259, 2, 3, '\\wq\\wd', '2024-12-05 09:55:12'),
(260, 2, 3, 'qw\\qd', '2024-12-05 09:55:13'),
(261, 2, 3, 'd\\q', '2024-12-05 09:55:13'),
(262, 2, 3, 'qw\\d', '2024-12-05 09:55:13'),
(263, 2, 3, '\\', '2024-12-05 09:55:13'),
(264, 2, 3, 'dqw\\dwq', '2024-12-05 09:55:14'),
(265, 2, 3, '\\dqw', '2024-12-05 09:55:14'),
(266, 2, 3, 'qd\\w', '2024-12-05 09:55:14'),
(267, 2, 3, 'qwd\\', '2024-12-05 09:55:14'),
(268, 2, 3, 'qdw\\', '2024-12-05 09:55:14'),
(269, 2, 3, 'dw\\;lowl[d.qw', '2024-12-05 09:55:15'),
(270, 2, 3, 'doqwkld,lwmkldsjsafklamvkkpwfjjlakmd,skfmlald;madfjlkfpakakkdlakkvks;la', '2024-12-05 09:55:20'),
(271, 2, 3, 'wlwkqldklqwqkdwoiqwkmdfkkld', '2024-12-05 09:55:23'),
(272, 2, 3, 'lwld[q\'wlqwldqw', '2024-12-05 09:55:24'),
(273, 2, 3, 'dqwldlldqq', '2024-12-05 09:55:25'),
(274, 2, 3, 'dkdq', '2024-12-05 09:55:25'),
(275, 2, 3, 'dqqddqd', '2024-12-05 09:55:26'),
(276, 2, 3, 'dqdq', '2024-12-05 09:55:26'),
(277, 2, 3, 'dqdq;\';qlqqdldlkdw', '2024-12-05 09:55:40'),
(278, 2, 3, 'dwd;wdw', '2024-12-05 09:55:41'),
(279, 2, 3, 'dw;dw.dwdw', '2024-12-05 09:55:42'),
(280, 2, 3, 'dw;d;w;qdw', '2024-12-05 09:55:42'),
(281, 2, 3, 'dwqwldqwkw;llww', '2024-12-05 09:55:43'),
(282, 2, 3, 'dwdqw;dlw;qw;dqwdq\'w', '2024-12-05 09:55:44'),
(283, 2, 3, 'dqwdw;dqw,qwqw.ldw', '2024-12-05 09:55:45'),
(284, 2, 3, 'dw,dqw', '2024-12-05 09:55:46'),
(285, 2, 3, 'qdqw', '2024-12-05 09:55:46'),
(286, 2, 3, 'dwdwdw', '2024-12-05 09:56:04'),
(287, 2, 3, 'dwd', '2024-12-05 09:56:04'),
(288, 2, 3, 'dw', '2024-12-05 09:56:04'),
(289, 2, 3, 'dw', '2024-12-05 09:56:05'),
(290, 2, 3, 'dw', '2024-12-05 09:56:05'),
(291, 2, 3, 'dw', '2024-12-05 09:56:05'),
(292, 2, 3, 'd', '2024-12-05 09:56:05'),
(293, 2, 3, 'd', '2024-12-05 09:56:05'),
(294, 2, 3, 'dw', '2024-12-05 09:56:05'),
(295, 2, 3, 'dw', '2024-12-05 09:56:06'),
(296, 2, 3, 'dw', '2024-12-05 09:56:06'),
(297, 2, 3, 'dw', '2024-12-05 09:56:06'),
(298, 2, 3, 'd', '2024-12-05 09:56:06'),
(299, 2, 3, 'd', '2024-12-05 09:56:06'),
(300, 2, 3, 'dwdw', '2024-12-05 09:56:07'),
(301, 2, 3, 'dw', '2024-12-05 09:56:07'),
(302, 2, 3, 'dw\'lewdqw[;wq', '2024-12-05 09:56:08'),
(303, 2, 3, 'w;\';\'wdw;wd\'dw', '2024-12-05 09:56:09'),
(304, 2, 3, 'w;\'d;wq\'dqw;\'qwd', '2024-12-05 09:56:10'),
(305, 2, 3, 'dqwdqwq\'wdq\'w\'dqw', '2024-12-05 09:56:11'),
(306, 2, 3, 'dqwdqw\'qwd;\'w;q', '2024-12-05 09:56:12'),
(307, 2, 3, ';\'dqw;wd\'d;qw\'dqw;dqw', '2024-12-05 09:56:13'),
(308, 2, 3, 'dw;\'dqw;dq\'w;dqw\'', '2024-12-05 09:56:14'),
(309, 2, 3, 'd;qw\\\'dqw;\'qd;w', '2024-12-05 09:56:15'),
(310, 2, 3, 'q;dq\'w;dqw\';dqw', '2024-12-05 09:56:16'),
(311, 2, 3, 'dqwdq\'w;dqw\'d;wq', '2024-12-05 09:56:17'),
(312, 2, 3, 'qdw;dqw\';wdq\';qwd', '2024-12-05 09:56:18'),
(313, 2, 3, 'dqw;\'dqw;w\'dqw', '2024-12-05 09:56:19'),
(314, 2, 3, 'dqwqd\'wqdw;q\'qd', '2024-12-05 09:56:20'),
(315, 2, 3, ';\'qd;w\';qdw', '2024-12-05 09:56:21'),
(316, 2, 3, ';dwq;qwd;dwq', '2024-12-05 09:56:22'),
(317, 2, 3, 'qwddqw\';dq\'w;dw', '2024-12-05 09:56:23'),
(318, 2, 3, 'qwd;q\'wd;\'dqw', '2024-12-05 09:56:24'),
(319, 2, 3, 'dwq\'d;qw\'d;qw', '2024-12-05 09:56:25'),
(320, 2, 3, 'dqw;\'dqw;dqw', '2024-12-05 09:56:26'),
(321, 2, 3, 'dqw', '2024-12-05 09:56:26'),
(322, 2, 3, ';dq\'w;dqw', '2024-12-05 09:56:27'),
(323, 2, 3, '1', '2024-12-05 09:56:28'),
(324, 2, 3, '1', '2024-12-05 09:56:28'),
(325, 2, 3, '1', '2024-12-05 09:56:29'),
(326, 2, 3, '1', '2024-12-05 09:56:29'),
(327, 2, 3, '1', '2024-12-05 09:56:29'),
(328, 2, 3, '1', '2024-12-05 09:56:29'),
(329, 2, 3, '1', '2024-12-05 09:56:30'),
(330, 2, 3, '1', '2024-12-05 09:56:30'),
(331, 2, 3, '1', '2024-12-05 09:56:30'),
(332, 2, 3, '1', '2024-12-05 09:56:30'),
(333, 2, 3, '1', '2024-12-05 09:56:30'),
(334, 2, 3, '1', '2024-12-05 09:56:31'),
(335, 2, 3, '1', '2024-12-05 09:56:31'),
(336, 2, 3, '1', '2024-12-05 09:56:31'),
(337, 2, 3, '1', '2024-12-05 09:56:31'),
(338, 2, 3, '1', '2024-12-05 09:56:31'),
(339, 2, 3, '1', '2024-12-05 09:56:32'),
(340, 2, 3, '1', '2024-12-05 09:56:32'),
(341, 2, 3, '1', '2024-12-05 09:56:32'),
(342, 2, 3, '1', '2024-12-05 09:56:32'),
(343, 2, 3, '1', '2024-12-05 09:56:33'),
(344, 2, 3, '1', '2024-12-05 09:56:33'),
(345, 2, 3, '1', '2024-12-05 09:56:33'),
(346, 2, 3, '1', '2024-12-05 09:56:33'),
(347, 2, 3, '1', '2024-12-05 09:56:33'),
(348, 2, 3, '1', '2024-12-05 09:56:34'),
(349, 2, 3, '1', '2024-12-05 09:56:34'),
(350, 2, 3, '1', '2024-12-05 09:56:34'),
(351, 2, 3, '1', '2024-12-05 09:56:34'),
(352, 2, 3, '1', '2024-12-05 09:56:34'),
(353, 2, 3, '1', '2024-12-05 09:56:35'),
(354, 2, 3, '1', '2024-12-05 09:56:35'),
(355, 2, 3, '1', '2024-12-05 09:56:35'),
(356, 2, 3, '1', '2024-12-05 09:56:35'),
(357, 2, 3, '1', '2024-12-05 09:56:35'),
(358, 2, 3, '1', '2024-12-05 09:56:35'),
(359, 2, 3, '1', '2024-12-05 09:56:36'),
(360, 2, 3, '1', '2024-12-05 09:56:36'),
(361, 2, 3, '1', '2024-12-05 09:56:36'),
(362, 2, 3, '1', '2024-12-05 09:56:37'),
(363, 2, 3, '1', '2024-12-05 09:56:37'),
(364, 2, 3, '1', '2024-12-05 09:56:37'),
(365, 2, 3, '1', '2024-12-05 09:56:37'),
(366, 2, 3, '1', '2024-12-05 09:56:37'),
(367, 2, 3, '1', '2024-12-05 09:56:38'),
(368, 2, 3, '1', '2024-12-05 09:56:38'),
(369, 2, 3, '1', '2024-12-05 09:56:38'),
(370, 2, 3, '1', '2024-12-05 09:56:38'),
(371, 2, 3, '1', '2024-12-05 09:56:38'),
(372, 2, 3, '1', '2024-12-05 09:56:39'),
(373, 2, 3, '1', '2024-12-05 09:56:39'),
(374, 2, 3, '1', '2024-12-05 09:56:39'),
(375, 2, 3, '1', '2024-12-05 09:56:39'),
(376, 2, 3, '1', '2024-12-05 09:56:39'),
(377, 2, 3, '1', '2024-12-05 09:56:40'),
(378, 2, 3, '11', '2024-12-05 09:56:40'),
(379, 2, 3, '1', '2024-12-05 09:56:40'),
(380, 2, 3, '1', '2024-12-05 09:56:41'),
(381, 2, 3, '1', '2024-12-05 09:56:41'),
(382, 2, 3, '1', '2024-12-05 09:56:41'),
(383, 2, 3, '1', '2024-12-05 09:56:41'),
(384, 2, 3, '1', '2024-12-05 09:56:41'),
(385, 2, 3, '1', '2024-12-05 09:56:42'),
(386, 2, 3, '1', '2024-12-05 09:56:42'),
(387, 2, 3, '1', '2024-12-05 09:56:42'),
(388, 2, 3, '1', '2024-12-05 09:56:42'),
(389, 2, 3, '1', '2024-12-05 09:56:42'),
(390, 2, 3, '1', '2024-12-05 09:56:43'),
(391, 2, 3, '1', '2024-12-05 09:56:43'),
(392, 2, 3, '1', '2024-12-05 09:56:43'),
(393, 2, 3, '1', '2024-12-05 09:56:43'),
(394, 2, 3, '1', '2024-12-05 09:56:44'),
(395, 2, 3, '1', '2024-12-05 09:56:44'),
(396, 2, 3, '1', '2024-12-05 09:56:44'),
(397, 2, 3, '1', '2024-12-05 09:56:44'),
(398, 2, 3, '1', '2024-12-05 09:56:44'),
(399, 2, 3, '1', '2024-12-05 09:56:45'),
(400, 2, 3, '1', '2024-12-05 09:56:45'),
(401, 2, 3, '1', '2024-12-05 09:56:45'),
(402, 2, 3, '1', '2024-12-05 09:56:45'),
(403, 2, 3, '1', '2024-12-05 09:56:46'),
(404, 2, 3, '1', '2024-12-05 09:56:46'),
(405, 2, 3, '1', '2024-12-05 09:56:46'),
(406, 2, 3, '1', '2024-12-05 09:56:46'),
(407, 2, 3, '1', '2024-12-05 09:56:46'),
(408, 2, 3, '1', '2024-12-05 09:56:47'),
(409, 2, 3, '1', '2024-12-05 09:56:47'),
(410, 2, 3, '1', '2024-12-05 09:56:47'),
(411, 2, 3, '1', '2024-12-05 09:56:47'),
(412, 2, 3, '1', '2024-12-05 09:56:48'),
(413, 2, 3, '1', '2024-12-05 09:56:48'),
(414, 2, 3, '1', '2024-12-05 09:56:48'),
(415, 2, 3, '1', '2024-12-05 09:56:49'),
(416, 2, 3, '1', '2024-12-05 09:56:49'),
(417, 2, 3, '1', '2024-12-05 09:56:49'),
(418, 2, 3, '1', '2024-12-05 09:56:49'),
(419, 2, 3, '1', '2024-12-05 09:56:50'),
(420, 2, 3, '1', '2024-12-05 09:56:50'),
(421, 2, 3, '1', '2024-12-05 09:56:50'),
(422, 2, 3, '1', '2024-12-05 09:56:50'),
(423, 2, 3, '1', '2024-12-05 09:56:51'),
(424, 2, 3, '1', '2024-12-05 09:56:51'),
(425, 2, 3, '1', '2024-12-05 09:56:51'),
(426, 2, 3, '1', '2024-12-05 09:56:51'),
(427, 2, 3, '1', '2024-12-05 09:56:52'),
(428, 2, 3, '1', '2024-12-05 09:56:52'),
(429, 2, 3, '1', '2024-12-05 09:56:52'),
(430, 2, 3, '1', '2024-12-05 09:56:52'),
(431, 2, 3, '1', '2024-12-05 09:56:52'),
(432, 2, 3, '1', '2024-12-05 09:56:53'),
(433, 2, 3, '1', '2024-12-05 09:56:53'),
(434, 2, 3, '1', '2024-12-05 09:56:53'),
(435, 2, 3, '1', '2024-12-05 09:56:53'),
(436, 2, 3, '1', '2024-12-05 09:56:53'),
(437, 2, 3, '1', '2024-12-05 09:56:53'),
(438, 2, 3, '1', '2024-12-05 09:56:54'),
(439, 2, 3, '1', '2024-12-05 09:56:54'),
(440, 2, 3, '11', '2024-12-05 09:56:54'),
(441, 2, 3, '1', '2024-12-05 09:56:54'),
(442, 2, 3, '1', '2024-12-05 09:56:55'),
(443, 2, 3, '1', '2024-12-05 09:56:55'),
(444, 2, 3, '1', '2024-12-05 09:56:55'),
(445, 2, 3, '1', '2024-12-05 09:56:55'),
(446, 2, 3, '1', '2024-12-05 09:56:55'),
(447, 2, 3, '1', '2024-12-05 09:56:55'),
(448, 2, 3, '1', '2024-12-05 09:56:56'),
(449, 2, 3, '11', '2024-12-05 09:56:56'),
(450, 2, 3, '1', '2024-12-05 09:56:56'),
(451, 2, 3, '1', '2024-12-05 09:56:56'),
(452, 2, 3, '1', '2024-12-05 09:56:56'),
(453, 2, 3, '11111111111111111', '2024-12-05 09:56:58'),
(454, 2, 3, 'd', '2024-12-05 09:56:59'),
(455, 2, 3, 'wq', '2024-12-05 09:56:59'),
(456, 2, 3, 'wddw', '2024-12-05 09:57:00'),
(457, 2, 3, 'import React, { useState, useEffect, useRef } from \'react\'; // Добавлен useRef import { useParams, useNavigate } from \'react-router-dom\'; import { jwtDecode } from \'jwt-decode\'; import { toast, ToastContainer } from \'react-toastify\'; import \'react-toastify/dist/ReactToastify.css\'; import \'./css-v2/ChatsPage.css\';  const Chats = () => {     const { chatId } = useParams();     const [selectedUser, setSelectedUser] = useState(null);     const [messages, setMessages] = useState([]);     const [newMessage, setNewMessage] = useState(\'\');     const [users, setUsers] = useState([]);     const [currentUser, setCurrentUser] = useState(null);     const [unreadMessagesCount, setUnreadMessagesCount] = useState({});     const messagesEndRef = useRef(null); // Добавляем ref     const navigate = useNavigate();      // Функция для прокрутки вниз     const scrollToBottom = () => {         messagesEndRef.current?.scrollIntoView({ behavior: \'smooth\' });     };      useEffect(() => {         const fetchUsers = async () => {             const token = localStorage.getItem(\"token\");             if (!token) {                 console.error(\"Токен не найден, требуется авторизация!\");                 navigate(\'/login\');                 return;             }              try {                 const decodedToken = jwtDecode(token);                 setCurrentUser(decodedToken);                  const response = await fetch(\'http://localhost:5000/users\', {                     method: \'GET\',                     headers: {                         \'Authorization\': `Bearer ${token}`,                     },                 });                 const usersData = await response.json();                 const filteredUsers = usersData.filter(user => user.id !== decodedToken.id);                 setUsers(filteredUsers);             } catch (error) {                 console.error(\"Ошибка при загрузке пользователей:\", error);                 navigate(\'/login\');             }         };          const fetchMessages = async (id) => {             const token = localStorage.getItem(\"token\");             try {                 const response = await fetch(`http://localhost:5000/messages/${id}`, {                     method: \'GET\',                     headers: {                         \'Authorization\': `Bearer ${token}`,                     },                 });                 const messagesData = await response.json();                 setMessages(messagesData);                  if (id !== chatId) {                     setUnreadMessagesCount((prevState) => ({                         ...prevState,                         [id]: messagesData.filter(msg => !msg.read).length,                     }));                 }             } catch (error) {                 console.error(\"Ошибка при загрузке сообщений:\", error);             }         };          fetchUsers();         if (chatId) {             fetchMessages(chatId);         }     }, [chatId, navigate]);      // Эффект для автоматической прокрутки при изменении сообщений     useEffect(() => {         scrollToBottom();     }, [messages]);      useEffect(() => {         const socket = new WebSocket(\'ws://localhost:8080\');          socket.onmessage = (event) => {             const notification = JSON.parse(event.data);              if (notification.type === \'NEW_MESSAGE\') {                 const message = notification.data;                  if (message.user_id === currentUser.id) return;                  if (message.chat_id !== chatId) {                     setUnreadMessagesCount((prevState) => ({                         ...prevState,                         [message.chat_id]: (prevState[message.chat_id] || 0) + 1,                     }));                      toast(                         <div onClick={() => navigate(`/chats/${message.chat_id}`)} style={{ cursor: \'pointer\' }}>                             Новое сообщение от {message.username || \'Неизвестный\'} в чате                         </div>,                         { autoClose: false }                     );                 } else {                     setMessages((prevMessages) => [...prevMessages, message]);                 }             }         };          return () => {             socket.close();         };     }, [chatId, currentUser, navigate]);      const selectChat = (user) => {         if (selectedUser && selectedUser.id === user.id) {             return;         }          setSelectedUser(user);         setMessages([]);         setUnreadMessagesCount((prevState) => ({ ...prevState, [user.id]: 0 }));          const token = localStorage.getItem(\"token\");         if (!token) return;          const userId2 = user.id;          fetch(\'http://localhost:5000/chats\', {             method: \'POST\',             headers: {                 \'Content-Type\': \'application/json\',                 \'Authorization\': `Bearer ${token}`,             },             body: JSON.stringify({ userId2 }),         })             .then(response => response.json())             .then(chatData => {                 if (chatData.id) {                     navigate(`/chats/${chatData.id}`);                 }             })             .catch(err => console.error(\"Ошибка при создании чата\", err));     };      const sendMessage = async () => {         if (newMessage.trim()) {             const token = localStorage.getItem(\"token\");             try {                 const response = await fetch(`http://localhost:5000/messages`, {                     method: \'POST\',                     headers: {                         \'Content-Type\': \'application/json\',                         \'Authorization\': `Bearer ${token}`,                     },                     body: JSON.stringify({ chatId, message: newMessage, username: currentUser.username }),                 });                  if (response.ok) {                     const sentMessage = {                         id: Date.now(),                         chat_id: chatId,                         user_id: currentUser.id,                         message: newMessage,                         created_at: new Date().toISOString(),                         username: currentUser.username,                         read: true                     };                      setMessages((prevMessages) => [...prevMessages, sentMessage]);                     setNewMessage(\'\');                 } else {                     throw new Error(\'Ошибка при отправке сообщения\');                 }             } catch (error) {                 console.error(\'Ошибка при отправке сообщения:\', error);             }         }     };      const handleKeyDown = (e) => {         if (e.key === \'Enter\') {             e.preventDefault();             sendMessage();         }     };      const getAvatarUrl = (avatar) => {         return avatar ? `http://localhost:5000${avatar}` : \'/images/default-avatar.png\';     };      return (         <div className=\"chat-page\">             <ToastContainer />              <aside className=\"user-list\">                 <h3>Пользователи</h3>                 <ul>                     {users.map((user) => (                         <li                             key={user.id}                             onClick={() => selectChat(user)}                             className={selectedUser && selectedUser.id === user.id ? \'active-chat\' : \'\'}                         >                             <img src={getAvatarUrl(user.avatar)} alt={`${user.username} avatar`} />                             <p>{user.username}</p>                             {unreadMessagesCount[user.id] > 0 && (                                 <span className=\"notification-badge\">                                     {unreadMessagesCount[user.id]}                                 </span>                             )}                         </li>                     ))}                 </ul>             </aside>              <main className=\"chat-box\">                 <div className=\"chat-header\">                     <h2>{selectedUser ? selectedUser.username : \'Выберите пользователя\'}</h2>                 </div>                  <div className=\"chat-messages\">                     {messages.map((message) => (                         <div key={message.id} className={message.user_id === currentUser.id ? \'message mine\' : \'message\'}>                             {message.message || \'Сообщение не найдено\'}                         </div>                     ))}                     <div ref={messagesEndRef} /> {/* Контейнер для прокрутки */}                 </div>                  {selectedUser && (                     <div className=\"chat-input-container\">                         <input                             type=\"text\"                             value={newMessage}                             onChange={(e) => setNewMessage(e.target.value)}                             onKeyDown={handleKeyDown}                             placeholder=\"Введите сообщение...\"                             className=\"chat-input\"                         />                         <button className=\"chat-send btn\" onClick={sendMessage}>Отправить</button>                     </div>                 )}             </main>         </div>     ); };  export default Chats;', '2024-12-05 09:57:04'),
(458, 2, 3, 'usus', '2024-12-05 10:01:25'),
(459, 2, 3, 'dwdw', '2024-12-05 10:01:29'),
(460, 2, 3, 'dw', '2024-12-05 10:01:30'),
(461, 2, 3, 'w', '2024-12-05 10:01:31'),
(462, 2, 3, 'dw', '2024-12-05 10:01:31'),
(463, 2, 3, 'dw', '2024-12-05 10:01:31'),
(464, 2, 3, 'dw', '2024-12-05 10:01:31'),
(465, 2, 3, 'dw', '2024-12-05 10:01:31'),
(466, 2, 3, 'dw', '2024-12-05 10:01:32'),
(467, 2, 3, 'dw', '2024-12-05 10:01:32'),
(468, 2, 3, 'dw', '2024-12-05 10:01:32'),
(469, 2, 3, 'd', '2024-12-05 10:01:32'),
(470, 2, 3, 'd', '2024-12-05 10:01:32'),
(471, 2, 3, 'dw', '2024-12-05 10:01:32'),
(472, 2, 3, 'dw', '2024-12-05 10:01:33'),
(473, 2, 3, 'dw', '2024-12-05 10:01:33'),
(474, 2, 3, 'dw', '2024-12-05 10:01:34'),
(475, 2, 1, 'dwdw', '2024-12-05 10:01:55'),
(476, 2, 3, 'dwdwdw', '2024-12-05 10:01:57'),
(477, 2, 3, 'dwdwdw', '2024-12-05 10:01:59'),
(478, 2, 3, 'wdwdw', '2024-12-05 10:02:00'),
(479, 2, 3, 'import React, { useState, useEffect, useRef } from \'react\'; import { useParams, useNavigate } from \'react-router-dom\'; import { jwtDecode } from \'jwt-decode\'; import { toast, ToastContainer } from \'react-toastify\'; import \'react-toastify/dist/ReactToastify.css\'; import \'highlight.js/styles/github.css\'; // Импортируем стили подсветки import hljs from \'highlight.js\'; import \'./css-v2/ChatsPage.css\';  const Chats = () => {     const { chatId } = useParams();     const [selectedUser, setSelectedUser] = useState(null);     const [messages, setMessages] = useState([]);     const [newMessage, setNewMessage] = useState(\'\');     const [users, setUsers] = useState([]);     const [currentUser, setCurrentUser] = useState(null);     const [unreadMessagesCount, setUnreadMessagesCount] = useState({});     const messagesEndRef = useRef(null);     const navigate = useNavigate();      const scrollToBottom = () => {         messagesEndRef.current?.scrollIntoView({ behavior: \'smooth\' });     };      useEffect(() => {         const fetchUsers = async () => {             const token = localStorage.getItem(\"token\");             if (!token) {                 console.error(\"Токен не найден, требуется авторизация!\");                 navigate(\'/login\');                 return;             }              try {                 const decodedToken = jwtDecode(token);                 setCurrentUser(decodedToken);                  const response = await fetch(\'http://localhost:5000/users\', {                     method: \'GET\',                     headers: {                         \'Authorization\': `Bearer ${token}`,                     },                 });                 const usersData = await response.json();                 const filteredUsers = usersData.filter(user => user.id !== decodedToken.id);                 setUsers(filteredUsers);             } catch (error) {                 console.error(\"Ошибка при загрузке пользователей:\", error);                 navigate(\'/login\');             }         };          const fetchMessages = async (id) => {             const token = localStorage.getItem(\"token\");             try {                 const response = await fetch(`http://localhost:5000/messages/${id}`, {                     method: \'GET\',                     headers: {                         \'Authorization\': `Bearer ${token}`,                     },                 });                 const messagesData = await response.json();                 setMessages(messagesData);                  if (id !== chatId) {                     setUnreadMessagesCount((prevState) => ({                         ...prevState,                         [id]: messagesData.filter(msg => !msg.read).length,                     }));                 }             } catch (error) {                 console.error(\"Ошибка при загрузке сообщений:\", error);             }         };          fetchUsers();         if (chatId) {             fetchMessages(chatId);         }     }, [chatId, navigate]);      useEffect(() => {         scrollToBottom();     }, [messages]);      useEffect(() => {         const socket = new WebSocket(\'ws://localhost:8080\');          socket.onmessage = (event) => {             const notification = JSON.parse(event.data);              if (notification.type === \'NEW_MESSAGE\') {                 const message = notification.data;                  if (message.user_id === currentUser.id) return;                  if (message.chat_id !== chatId) {                     setUnreadMessagesCount((prevState) => ({                         ...prevState,                         [message.chat_id]: (prevState[message.chat_id] || 0) + 1,                     }));                      toast(                         <div onClick={() => navigate(`/chats/${message.chat_id}`)} style={{ cursor: \'pointer\' }}>                             Новое сообщение от {message.username || \'Неизвестный\'} в чате                         </div>,                         { autoClose: false }                     );                 } else {                     setMessages((prevMessages) => [...prevMessages, message]);                 }             }         };          return () => {             socket.close();         };     }, [chatId, currentUser, navigate]);      const isCodeBlock = (text) => {         return text.startsWith(\'```\') && text.endsWith(\'```\');     };      const formatMessage = (text) => {         if (isCodeBlock(text)) {             const code = text.slice(3, -3).trim(); // Убираем \"```\"             const highlightedCode = hljs.highlightAuto(code).value;             return <pre dangerouslySetInnerHTML={{ __html: highlightedCode }} />;         }         return <p>{text}</p>;     };      const selectChat = (user) => {         if (selectedUser && selectedUser.id === user.id) {             return;         }          setSelectedUser(user);         setMessages([]);         setUnreadMessagesCount((prevState) => ({ ...prevState, [user.id]: 0 }));          const token = localStorage.getItem(\"token\");         if (!token) return;          const userId2 = user.id;          fetch(\'http://localhost:5000/chats\', {             method: \'POST\',             headers: {                 \'Content-Type\': \'application/json\',                 \'Authorization\': `Bearer ${token}`,             },             body: JSON.stringify({ userId2 }),         })             .then(response => response.json())             .then(chatData => {                 if (chatData.id) {                     navigate(`/chats/${chatData.id}`);                 }             })             .catch(err => console.error(\"Ошибка при создании чата\", err));     };      const sendMessage = async () => {         if (newMessage.trim()) {             const token = localStorage.getItem(\"token\");             try {                 const response = await fetch(`http://localhost:5000/messages`, {                     method: \'POST\',                     headers: {                         \'Content-Type\': \'application/json\',                         \'Authorization\': `Bearer ${token}`,                     },                     body: JSON.stringify({ chatId, message: newMessage, username: currentUser.username }),                 });                  if (response.ok) {                     const sentMessage = {                         id: Date.now(),                         chat_id: chatId,                         user_id: currentUser.id,                         message: newMessage,                         created_at: new Date().toISOString(),                         username: currentUser.username,                         read: true                     };                      setMessages((prevMessages) => [...prevMessages, sentMessage]);                     setNewMessage(\'\');                 } else {                     throw new Error(\'Ошибка при отправке сообщения\');                 }             } catch (error) {                 console.error(\'Ошибка при отправке сообщения:\', error);             }         }     };      const handleKeyDown = (e) => {         if (e.key === \'Enter\') {             e.preventDefault();             sendMessage();         }     };      const getAvatarUrl = (avatar) => {         return avatar ? `http://localhost:5000${avatar}` : \'/images/default-avatar.png\';     };      return (         <div className=\"chat-page\">             <ToastContainer />              <aside className=\"user-list\">                 <h3>Пользователи</h3>                 <ul>                     {users.map((user) => (                         <li                             key={user.id}                             onClick={() => selectChat(user)}                             className={selectedUser && selectedUser.id === user.id ? \'active-chat\' : \'\'}                         >                             <img src={getAvatarUrl(user.avatar)} alt={`${user.username} avatar`} />                             <p>{user.username}</p>                             {unreadMessagesCount[user.id] > 0 && (                                 <span className=\"notification-badge\">                                     {unreadMessagesCount[user.id]}                                 </span>                             )}                         </li>                     ))}                 </ul>             </aside>              <main className=\"chat-box\">                 <div className=\"chat-header\">                     <h2>{selectedUser ? selectedUser.username : \'Выберите пользователя\'}</h2>                 </div>                  <div className=\"chat-messages\">                     {messages.map((message) => (                         <div key={message.id} className={message.user_id === currentUser.id ? \'message mine\' : \'message\'}>                             {formatMessage(message.message || \'Сообщение не найдено\')}                         </div>                     ))}                     <div ref={messagesEndRef} />                 </div>                  {selectedUser && (                     <div className=\"chat-input-container\">                         <input                             type=\"text\"                             value={newMessage}                             onChange={(e) => setNewMessage(e.target.value)}                             onKeyDown={handleKeyDown}                             placeholder=\"Введите сообщение...\"                             className=\"chat-input\"                         />                         <button className=\"chat-send btn\" onClick={sendMessage}>Отправить</button>                     </div>                 )}             </main>         </div>     ); };  export default Chats;', '2024-12-05 10:02:01'),
(480, 2, 1, '```', '2024-12-05 10:02:37'),
(481, 2, 1, '````', '2024-12-05 10:02:41'),
(482, 2, 1, 'dw', '2024-12-05 10:02:43'),
(483, 2, 1, '```import React, { useState, useEffect, useRef } from \'react\'; import { useParams, useNavigate } from \'react-router-dom\'; import { jwtDecode } from \'jwt-decode\'; import { toast, ToastContainer } from \'react-toastify\'; import \'react-toastify/dist/ReactToastify.css\'; import \'highlight.js/styles/github.css\'; // Импортируем стили подсветки import hljs from \'highlight.js\'; import \'./css-v2/ChatsPage.css\';  const Chats = () => {     const { chatId } = useParams();     const [selectedUser, setSelectedUser] = useState(null);     const [messages, setMessages] = useState([]);     const [newMessage, setNewMessage] = useState(\'\');     const [users, setUsers] = useState([]);     const [currentUser, setCurrentUser] = useState(null);     const [unreadMessagesCount, setUnreadMessagesCount] = useState({});     const messagesEndRef = useRef(null);     const navigate = useNavigate();      const scrollToBottom = () => {         messagesEndRef.current?.scrollIntoView({ behavior: \'smooth\' });     };      useEffect(() => {         const fetchUsers = async () => {             const token = localStorage.getItem(\"token\");             if (!token) {                 console.error(\"Токен не найден, требуется авторизация!\");                 navigate(\'/login\');                 return;             }              try {                 const decodedToken = jwtDecode(token);                 setCurrentUser(decodedToken);                  const response = await fetch(\'http://localhost:5000/users\', {                     method: \'GET\',                     headers: {                         \'Authorization\': `Bearer ${token}`,                     },                 });                 const usersData = await response.json();                 const filteredUsers = usersData.filter(user => user.id !== decodedToken.id);                 setUsers(filteredUsers);             } catch (error) {                 console.error(\"Ошибка при загрузке пользователей:\", error);                 navigate(\'/login\');             }         };          const fetchMessages = async (id) => {             const token = localStorage.getItem(\"token\");             try {                 const response = await fetch(`http://localhost:5000/messages/${id}`, {                     method: \'GET\',                     headers: {                         \'Authorization\': `Bearer ${token}`,                     },                 });                 const messagesData = await response.json();                 setMessages(messagesData);                  if (id !== chatId) {                     setUnreadMessagesCount((prevState) => ({                         ...prevState,                         [id]: messagesData.filter(msg => !msg.read).length,                     }));                 }             } catch (error) {                 console.error(\"Ошибка при загрузке сообщений:\", error);             }         };          fetchUsers();         if (chatId) {             fetchMessages(chatId);         }     }, [chatId, navigate]);      useEffect(() => {         scrollToBottom();     }, [messages]);      useEffect(() => {         const socket = new WebSocket(\'ws://localhost:8080\');          socket.onmessage = (event) => {             const notification = JSON.parse(event.data);              if (notification.type === \'NEW_MESSAGE\') {                 const message = notification.data;                  if (message.user_id === currentUser.id) return;                  if (message.chat_id !== chatId) {                     setUnreadMessagesCount((prevState) => ({                         ...prevState,                         [message.chat_id]: (prevState[message.chat_id] || 0) + 1,                     }));                      toast(                         <div onClick={() => navigate(`/chats/${message.chat_id}`)} style={{ cursor: \'pointer\' }}>                             Новое сообщение от {message.username || \'Неизвестный\'} в чате                         </div>,                         { autoClose: false }                     );                 } else {                     setMessages((prevMessages) => [...prevMessages, message]);                 }             }         };          return () => {             socket.close();         };     }, [chatId, currentUser, navigate]);      const isCodeBlock = (text) => {         return text.startsWith(\'```\') && text.endsWith(\'```\');     };      const formatMessage = (text) => {         if (isCodeBlock(text)) {             const code = text.slice(3, -3).trim(); // Убираем \"```\"             const highlightedCode = hljs.highlightAuto(code).value;             return <pre dangerouslySetInnerHTML={{ __html: highlightedCode }} />;         }         return <p>{text}</p>;     };      const selectChat = (user) => {         if (selectedUser && selectedUser.id === user.id) {             return;         }          setSelectedUser(user);         setMessages([]);         setUnreadMessagesCount((prevState) => ({ ...prevState, [user.id]: 0 }));          const token = localStorage.getItem(\"token\");         if (!token) return;          const userId2 = user.id;          fetch(\'http://localhost:5000/chats\', {             method: \'POST\',             headers: {                 \'Content-Type\': \'application/json\',                 \'Authorization\': `Bearer ${token}`,             },             body: JSON.stringify({ userId2 }),         })             .then(response => response.json())             .then(chatData => {                 if (chatData.id) {                     navigate(`/chats/${chatData.id}`);                 }             })             .catch(err => console.error(\"Ошибка при создании чата\", err));     };      const sendMessage = async () => {         if (newMessage.trim()) {             const token = localStorage.getItem(\"token\");             try {                 const response = await fetch(`http://localhost:5000/messages`, {                     method: \'POST\',                     headers: {                         \'Content-Type\': \'application/json\',                         \'Authorization\': `Bearer ${token}`,                     },                     body: JSON.stringify({ chatId, message: newMessage, username: currentUser.username }),                 });                  if (response.ok) {                     const sentMessage = {                         id: Date.now(),                         chat_id: chatId,                         user_id: currentUser.id,                         message: newMessage,                         created_at: new Date().toISOString(),                         username: currentUser.username,                         read: true                     };                      setMessages((prevMessages) => [...prevMessages, sentMessage]);                     setNewMessage(\'\');                 } else {                     throw new Error(\'Ошибка при отправке сообщения\');                 }             } catch (error) {                 console.error(\'Ошибка при отправке сообщения:\', error);             }         }     };      const handleKeyDown = (e) => {         if (e.key === \'Enter\') {             e.preventDefault();             sendMessage();         }     };      const getAvatarUrl = (avatar) => {         return avatar ? `http://localhost:5000${avatar}` : \'/images/default-avatar.png\';     };      return (         <div className=\"chat-page\">             <ToastContainer />              <aside className=\"user-list\">                 <h3>Пользователи</h3>                 <ul>                     {users.map((user) => (                         <li                             key={user.id}                             onClick={() => selectChat(user)}                             className={selectedUser && selectedUser.id === user.id ? \'active-chat\' : \'\'}                         >                             <img src={getAvatarUrl(user.avatar)} alt={`${user.username} avatar`} />                             <p>{user.username}</p>                             {unreadMessagesCount[user.id] > 0 && (                                 <span className=\"notification-badge\">                                     {unreadMessagesCount[user.id]}                                 </span>                             )}                         </li>                     ))}                 </ul>             </aside>              <main className=\"chat-box\">                 <div className=\"chat-header\">                     <h2>{selectedUser ? selectedUser.username : \'Выберите пользователя\'}</h2>                 </div>                  <div className=\"chat-messages\">                     {messages.map((message) => (                         <div key={message.id} className={message.user_id === currentUser.id ? \'message mine\' : \'message\'}>                             {formatMessage(message.message || \'Сообщение не найдено\')}                         </div>                     ))}                     <div ref={messagesEndRef} />                 </div>                  {selectedUser && (                     <div className=\"chat-input-container\">                         <input                             type=\"text\"                             value={newMessage}                             onChange={(e) => setNewMessage(e.target.value)}                             onKeyDown={handleKeyDown}                             placeholder=\"Введите сообщение...\"                             className=\"chat-input\"                         />                         <button className=\"chat-send btn\" onClick={sendMessage}>Отправить</button>                     </div>                 )}             </main>         </div>     ); };  export default Chats;```', '2024-12-05 10:02:48'),
(484, 2, 1, 'ууу', '2024-12-05 10:03:58'),
(485, 2, 1, 'у', '2024-12-05 10:03:59'),
(486, 2, 1, 'у', '2024-12-05 10:04:00'),
(487, 2, 1, 'wd', '2024-12-05 10:04:00'),
(488, 2, 1, 'dw', '2024-12-05 10:04:00'),
(489, 2, 1, 'dw', '2024-12-05 10:04:00'),
(490, 2, 1, 'd', '2024-12-05 10:04:00'),
(491, 2, 1, 'wd', '2024-12-05 10:04:00'),
(492, 2, 1, 'dw', '2024-12-05 10:04:01'),
(493, 2, 1, 'wd', '2024-12-05 10:04:02'),
(494, 2, 1, 'd', '2024-12-05 10:04:14'),
(495, 2, 1, 'd', '2024-12-05 10:04:14'),
(496, 2, 1, 'd', '2024-12-05 10:04:14'),
(497, 2, 1, 'dd', '2024-12-05 10:04:14'),
(498, 2, 1, 'd', '2024-12-05 10:04:14'),
(499, 2, 1, 'd', '2024-12-05 10:04:14'),
(500, 2, 1, 'd', '2024-12-05 10:04:15'),
(501, 2, 1, 'd', '2024-12-05 10:04:15'),
(502, 2, 1, 'd', '2024-12-05 10:04:15'),
(503, 2, 1, 'd', '2024-12-05 10:04:15');
INSERT INTO `messages` (`id`, `chat_id`, `user_id`, `message`, `created_at`) VALUES
(504, 2, 1, 'd', '2024-12-05 10:04:15'),
(505, 2, 1, 'd', '2024-12-05 10:04:15'),
(506, 2, 1, 'd', '2024-12-05 10:04:16'),
(507, 2, 1, 'd', '2024-12-05 10:04:16'),
(508, 2, 1, 'd', '2024-12-05 10:04:16'),
(509, 2, 1, 'd', '2024-12-05 10:04:16'),
(510, 2, 1, 'd', '2024-12-05 10:04:16'),
(511, 2, 1, 'd', '2024-12-05 10:04:16'),
(512, 2, 1, 'd', '2024-12-05 10:04:17'),
(513, 2, 1, 'dw', '2024-12-05 10:04:17'),
(514, 2, 1, 'w', '2024-12-05 10:04:17'),
(515, 2, 1, 'dw', '2024-12-05 10:04:17'),
(516, 2, 1, 'dw', '2024-12-05 10:04:17'),
(517, 2, 1, 'wd', '2024-12-05 10:04:17'),
(518, 2, 1, 'd', '2024-12-05 10:04:18'),
(519, 2, 1, 'w', '2024-12-05 10:04:18'),
(520, 2, 1, 'dw', '2024-12-05 10:04:18'),
(521, 2, 1, 'wdwddw', '2024-12-05 10:04:18'),
(522, 2, 1, 'wwdwd', '2024-12-05 10:04:19'),
(523, 2, 1, 'wd', '2024-12-05 10:04:19'),
(524, 2, 3, 'dwdwdw', '2024-12-05 10:04:36'),
(525, 2, 3, 'dwdwdw', '2024-12-05 10:04:40'),
(526, 2, 3, 'dwdw', '2024-12-05 10:04:41'),
(527, 2, 3, 'dwdw', '2024-12-05 10:04:42'),
(528, 2, 3, 'dw', '2024-12-05 10:04:42'),
(529, 2, 3, '```test```', '2024-12-05 10:06:39'),
(530, 2, 3, ';dwdw;', '2024-12-05 10:06:42'),
(531, 2, 3, '\'```test```\'', '2024-12-05 10:06:51'),
(532, 2, 3, '```test```', '2024-12-05 10:08:57'),
(533, 2, 3, '```test```', '2024-12-05 10:09:46'),
(534, 2, 3, 'я ведь прав?', '2024-12-05 10:14:00'),
(535, 2, 3, 'я ведь прав?', '2024-12-05 10:14:06'),
(536, 2, 3, 'вцвц', '2024-12-05 10:15:21'),
(537, 2, 3, 'еуые', '2024-12-05 10:16:05'),
(538, 2, 3, 'dwdw', '2024-12-05 10:16:17'),
(539, 2, 3, 'dwdwdw', '2024-12-05 10:16:25'),
(540, 2, 3, 'dwdw', '2024-12-05 10:16:37'),
(541, 2, 3, 'dwdw', '2024-12-05 10:16:44'),
(542, 2, 3, 'test', '2024-12-05 10:17:20'),
(543, 2, 3, 'test', '2024-12-05 10:18:46'),
(544, 2, 3, 'dwdw', '2024-12-05 10:18:52'),
(545, 2, 3, 'test', '2024-12-05 10:19:05'),
(546, 2, 1, 'еуые', '2024-12-05 10:21:01'),
(547, 2, 1, 'ete', '2024-12-05 10:21:08'),
(548, 2, 3, 'ggg', '2024-12-05 10:21:39'),
(549, 2, 3, 'dwdw', '2024-12-05 10:21:45'),
(550, 2, 3, 'dwwddw', '2024-12-05 10:21:50'),
(551, 2, 3, 'test', '2024-12-05 10:26:12'),
(552, 2, 3, 'dwdwdw', '2024-12-05 10:26:42'),
(553, 2, 3, 'еуые', '2024-12-05 10:28:21'),
(554, 2, 3, 'ецввцвц', '2024-12-05 10:28:43'),
(555, 2, 3, 'вцвцвц', '2024-12-05 10:29:29'),
(556, 2, 3, 'вцвц', '2024-12-05 10:29:33'),
(557, 2, 3, 'еуые', '2024-12-05 10:30:57'),
(558, 2, 3, 'вццввц', '2024-12-05 10:31:02'),
(559, 2, 3, 'вццввц', '2024-12-05 10:31:04'),
(560, 2, 3, 'вцвццв', '2024-12-05 10:31:10'),
(561, 2, 3, 'вцвц', '2024-12-05 10:31:16'),
(562, 2, 3, 'вццв', '2024-12-05 10:31:18'),
(563, 2, 1, 'еуые', '2024-12-05 10:33:35'),
(564, 2, 1, 'цввцвц', '2024-12-05 10:33:43'),
(565, 2, 3, 'вцвцвц', '2024-12-05 10:33:48'),
(566, 2, 3, 'вцвцвц', '2024-12-05 10:33:53'),
(567, 2, 1, 'ввцвц', '2024-12-05 10:34:25'),
(568, 2, 1, 'еуые', '2024-12-05 10:34:41'),
(569, 2, 3, 'dwdwdw', '2024-12-05 10:35:00'),
(570, 2, 3, 'kdwkdwkdw', '2024-12-05 10:35:05'),
(571, 2, 3, 'dwldwldwd', '2024-12-05 10:35:06'),
(572, 2, 3, 'kdwlwddw', '2024-12-05 10:35:06'),
(573, 2, 3, 'dwldwldwldw', '2024-12-05 10:35:07'),
(574, 2, 3, 'dwldwldlw', '2024-12-05 10:35:08'),
(575, 2, 3, 'dwldwldw', '2024-12-05 10:35:09'),
(576, 2, 1, 'dwdwdw', '2024-12-05 10:35:12'),
(577, 2, 1, 'wdwdw', '2024-12-05 10:35:13'),
(578, 2, 1, 'dwdw', '2024-12-05 10:35:13'),
(579, 2, 1, 'dw', '2024-12-05 10:35:13'),
(580, 2, 1, 'dw', '2024-12-05 10:35:13'),
(581, 2, 1, 'dw', '2024-12-05 10:35:13'),
(582, 2, 1, 'd', '2024-12-05 10:35:13'),
(583, 2, 1, 'dw', '2024-12-05 10:35:14'),
(584, 2, 1, 'dw', '2024-12-05 10:35:14'),
(585, 2, 1, 'dw', '2024-12-05 10:35:14'),
(586, 2, 1, 'dw', '2024-12-05 10:35:14'),
(587, 2, 1, 'dw', '2024-12-05 10:35:14'),
(588, 2, 1, 'dw', '2024-12-05 10:35:14'),
(589, 2, 1, 'dw', '2024-12-05 10:35:15'),
(590, 2, 1, 'dw', '2024-12-05 10:35:15'),
(591, 2, 1, 'dw', '2024-12-05 10:35:15'),
(592, 2, 1, 'dw', '2024-12-05 10:35:15'),
(593, 2, 1, 'dwdwd', '2024-12-05 10:35:15'),
(594, 2, 1, 'dw', '2024-12-05 10:35:16'),
(595, 2, 1, 'wddw', '2024-12-05 10:35:16'),
(596, 2, 1, 'dwdw', '2024-12-05 10:35:17'),
(597, 2, 1, 'dwdwd', '2024-12-05 10:35:17'),
(598, 2, 1, 'dw', '2024-12-05 10:35:18'),
(599, 2, 1, 'dwwddw', '2024-12-05 10:35:18'),
(600, 2, 3, 'dwdw', '2024-12-05 10:35:22'),
(601, 2, 1, 'вцвцвц', '2024-12-05 10:40:42'),
(602, 2, 3, 'вцвцвц', '2024-12-05 10:41:31'),
(603, 2, 3, 'вцвц', '2024-12-05 10:41:33'),
(604, 2, 3, 'вцвц', '2024-12-05 10:41:37'),
(605, 2, 3, 'вццвцвцвц', '2024-12-05 10:41:43'),
(606, 2, 3, 'вцвц', '2024-12-05 10:41:44'),
(607, 2, 3, 'вцвцвц', '2024-12-05 10:41:45'),
(608, 2, 3, 'ввцвц', '2024-12-05 10:41:49'),
(609, 2, 1, 'вццв', '2024-12-05 10:42:28'),
(610, 2, 1, 'вцвццв', '2024-12-05 10:45:21'),
(611, 2, 1, 'вцвцвц', '2024-12-05 10:45:30'),
(612, 2, 3, 'вцвц', '2024-12-05 10:46:43'),
(613, 2, 1, 'вцвцвц', '2024-12-05 10:46:53'),
(614, 2, 1, 'вццввц', '2024-12-05 10:47:01'),
(615, 2, 1, 'вцвцвц', '2024-12-05 10:47:10'),
(616, 2, 3, 'ецввцвц', '2024-12-05 10:49:21'),
(617, 2, 3, 'вцвцвц', '2024-12-05 11:00:02'),
(618, 2, 3, 'вцвц', '2024-12-05 11:00:06'),
(619, 2, 3, 'вцвц', '2024-12-05 11:00:07'),
(620, 2, 3, 'вцвц', '2024-12-05 11:00:07'),
(621, 2, 3, 'вцвц', '2024-12-05 11:00:11'),
(622, 2, 3, 'вцвцвц', '2024-12-05 11:07:08'),
(623, 2, 3, 'вцвц', '2024-12-05 11:07:27'),
(624, 2, 3, 'вцвц', '2024-12-05 11:07:44'),
(625, 2, 3, 'вцвц', '2024-12-05 11:07:48'),
(626, 2, 3, 'вцвц', '2024-12-05 11:08:05'),
(627, 2, 3, 'вцвцвц', '2024-12-05 11:08:14'),
(628, 2, 3, 'ввцвцвц', '2024-12-05 11:11:37'),
(629, 2, 3, 'dwdwdw', '2024-12-05 11:14:05'),
(630, 2, 1, 'dwdw', '2024-12-05 11:14:23'),
(631, 2, 1, 'привте', '2024-12-05 11:16:38'),
(632, 2, 1, 'вцвц', '2024-12-05 11:16:48'),
(633, 2, 1, 'dwdw', '2024-12-05 11:18:53'),
(634, 2, 1, 'dwwddw', '2024-12-05 11:18:55'),
(635, 2, 1, 'dwdwdw', '2024-12-05 11:19:00'),
(636, 2, 1, 'dwdw', '2024-12-05 11:19:01'),
(637, 2, 3, 'wdwdwdw', '2024-12-05 11:33:25'),
(638, 2, 3, 'dwdwdw', '2024-12-05 11:33:34'),
(639, 2, 3, 'dwdwdwdwdw', '2024-12-05 11:33:40'),
(640, 2, 3, 'dwdwdw', '2024-12-05 11:33:41'),
(641, 2, 3, 'dwdw', '2024-12-05 11:33:45'),
(642, 10, 1, 'Привет', '2024-12-05 11:43:10'),
(643, 10, 10, 'Привте', '2024-12-05 11:43:16');

-- --------------------------------------------------------

--
-- Структура таблицы `repositories`
--

CREATE TABLE `repositories` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `repo_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `repo_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `last_synced` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `repositories`
--

INSERT INTO `repositories` (`id`, `user_id`, `repo_name`, `repo_url`, `last_synced`) VALUES
(31, 3, 'API', 'https://github.com/Natalua9/API', '2024-12-04 07:27:30'),
(32, 3, 'BarShik', 'https://github.com/Natalua9/BarShik', '2024-12-04 07:27:30'),
(33, 3, 'DanseStydio', 'https://github.com/Natalua9/DanseStydio', '2024-12-04 07:27:30'),
(34, 3, 'kyrsovay', 'https://github.com/Natalua9/kyrsovay', '2024-12-04 07:27:30'),
(35, 3, 'laravelDemo', 'https://github.com/Natalua9/laravelDemo', '2024-12-04 07:27:30'),
(36, 3, 'Pinguins1', 'https://github.com/Natalua9/Pinguins1', '2024-12-04 07:27:30'),
(37, 3, 'proect_manager', 'https://github.com/Natalua9/proect_manager', '2024-12-04 07:27:30'),
(38, 3, 'test21', 'https://github.com/Natalua9/test21', '2024-12-04 07:27:30'),
(39, 3, 'todolist', 'https://github.com/Natalua9/todolist', '2024-12-04 07:27:30'),
(73, 2, '-', 'https://github.com/Denis18UKS/-', '2024-12-05 08:22:03'),
(74, 2, 'BarShik', 'https://github.com/Denis18UKS/BarShik', '2024-12-05 08:22:03'),
(75, 2, 'breadMaket', 'https://github.com/Denis18UKS/breadMaket', '2024-12-05 08:22:03'),
(76, 2, 'Concurs', 'https://github.com/Denis18UKS/Concurs', '2024-12-05 08:22:03'),
(77, 2, 'CurseForgeMyInstances', 'https://github.com/Denis18UKS/CurseForgeMyInstances', '2024-12-05 08:22:03'),
(78, 2, 'GITKonkurs2V-Penza-', 'https://github.com/Denis18UKS/GITKonkurs2V-Penza-', '2024-12-05 08:22:03'),
(79, 2, 'IP-Karpov-social', 'https://github.com/Denis18UKS/IP-Karpov-social', '2024-12-05 08:22:03'),
(80, 2, 'IP-Karpov-socialNewVersion', 'https://github.com/Denis18UKS/IP-Karpov-socialNewVersion', '2024-12-05 08:22:03'),
(81, 2, 'IT-BIRD-social', 'https://github.com/Denis18UKS/IT-BIRD-social', '2024-12-05 08:22:03'),
(82, 2, 'karpov-diplom-project', 'https://github.com/Denis18UKS/karpov-diplom-project', '2024-12-05 08:22:03'),
(83, 2, 'Karpov-Laravel-test', 'https://github.com/Denis18UKS/Karpov-Laravel-test', '2024-12-05 08:22:03'),
(84, 2, 'Kulinar', 'https://github.com/Denis18UKS/Kulinar', '2024-12-05 08:22:03'),
(85, 2, 'kursach', 'https://github.com/Denis18UKS/kursach', '2024-12-05 08:22:03'),
(86, 2, 'LaratestKarpovKarpov', 'https://github.com/Denis18UKS/LaratestKarpovKarpov', '2024-12-05 08:22:03'),
(87, 2, 'Laravel-Test', 'https://github.com/Denis18UKS/Laravel-Test', '2024-12-05 08:22:03'),
(88, 2, 'mdk0502', 'https://github.com/Denis18UKS/mdk0502', '2024-12-05 08:22:03'),
(89, 2, 'MyWorks', 'https://github.com/Denis18UKS/MyWorks', '2024-12-05 08:22:03'),
(90, 2, 'national-day', 'https://github.com/Denis18UKS/national-day', '2024-12-05 08:22:03'),
(91, 2, 'newrepos', 'https://github.com/Denis18UKS/newrepos', '2024-12-05 08:22:03'),
(92, 2, 'NewVersIP-Karpov-social', 'https://github.com/Denis18UKS/NewVersIP-Karpov-social', '2024-12-05 08:22:03'),
(93, 2, 'oz-avaise', 'https://github.com/Denis18UKS/oz-avaise', '2024-12-05 08:22:03'),
(94, 2, 'pinguins', 'https://github.com/Denis18UKS/pinguins', '2024-12-05 08:22:03'),
(95, 2, 'pl_hesablama', 'https://github.com/Denis18UKS/pl_hesablama', '2024-12-05 08:22:03'),
(96, 2, 'prj-management', 'https://github.com/Denis18UKS/prj-management', '2024-12-05 08:22:03'),
(97, 2, 'prj-management-Karpov', 'https://github.com/Denis18UKS/prj-management-Karpov', '2024-12-05 08:22:03'),
(98, 2, 'prj-managements', 'https://github.com/Denis18UKS/prj-managements', '2024-12-05 08:22:03'),
(99, 2, 'prj-managementssss', 'https://github.com/Denis18UKS/prj-managementssss', '2024-12-05 08:22:03'),
(100, 2, 'project-manager', 'https://github.com/Denis18UKS/project-manager', '2024-12-05 08:22:03'),
(101, 2, 'Screen_Build', 'https://github.com/Denis18UKS/Screen_Build', '2024-12-05 08:22:03'),
(102, 2, 'Teacher', 'https://github.com/Denis18UKS/Teacher', '2024-12-05 08:22:03'),
(103, 9, 'CSharpLab01', 'https://github.com/Oleeeg/CSharpLab01', '2024-12-05 08:58:22'),
(104, 9, 'CSharpLab04', 'https://github.com/Oleeeg/CSharpLab04', '2024-12-05 08:58:22'),
(105, 9, 'CSharpLab05', 'https://github.com/Oleeeg/CSharpLab05', '2024-12-05 08:58:22'),
(106, 9, 'CSharpLab3', 'https://github.com/Oleeeg/CSharpLab3', '2024-12-05 08:58:22'),
(107, 9, 'EPAM', 'https://github.com/Oleeeg/EPAM', '2024-12-05 08:58:22'),
(108, 9, 'git-project', 'https://github.com/Oleeeg/git-project', '2024-12-05 08:58:22'),
(109, 4, '-', 'https://github.com/Molin1987/-', '2024-12-05 11:20:20'),
(110, 4, 'BARSHIK', 'https://github.com/Molin1987/BARSHIK', '2024-12-05 11:20:20'),
(111, 4, 'demoLaravel', 'https://github.com/Molin1987/demoLaravel', '2024-12-05 11:20:20'),
(112, 4, 'Kursovaya', 'https://github.com/Molin1987/Kursovaya', '2024-12-05 11:20:20'),
(113, 4, 'lab1', 'https://github.com/Molin1987/lab1', '2024-12-05 11:20:20'),
(114, 4, 'Project-manager', 'https://github.com/Molin1987/Project-manager', '2024-12-05 11:20:20'),
(115, 4, 'Scooter24', 'https://github.com/Molin1987/Scooter24', '2024-12-05 11:20:20'),
(116, 4, 'test', 'https://github.com/Molin1987/test', '2024-12-05 11:20:20'),
(117, 4, 'ToDo', 'https://github.com/Molin1987/ToDo', '2024-12-05 11:20:20'),
(118, 4, 'Videohosting', 'https://github.com/Molin1987/Videohosting', '2024-12-05 11:20:20'),
(119, 10, '1', 'https://github.com/Viacheslav2005/1', '2024-12-05 08:39:26'),
(120, 10, '2', 'https://github.com/Viacheslav2005/2', '2024-12-05 08:39:26'),
(121, 10, 'BarShik', 'https://github.com/Viacheslav2005/BarShik', '2024-12-05 08:39:26'),
(122, 10, 'Course-paper', 'https://github.com/Viacheslav2005/Course-paper', '2024-12-05 08:39:26'),
(123, 10, 'Individual-project', 'https://github.com/Viacheslav2005/Individual-project', '2024-12-05 08:39:26'),
(124, 10, 'Individual-project-code', 'https://github.com/Viacheslav2005/Individual-project-code', '2024-12-05 08:39:26'),
(125, 10, 'Laba1', 'https://github.com/Viacheslav2005/Laba1', '2024-12-05 08:39:26'),
(126, 10, 'Laba1EGE', 'https://github.com/Viacheslav2005/Laba1EGE', '2024-12-05 08:39:26'),
(127, 10, 'Laravel', 'https://github.com/Viacheslav2005/Laravel', '2024-12-05 08:39:26'),
(128, 10, 'Penguins', 'https://github.com/Viacheslav2005/Penguins', '2024-12-05 08:39:26'),
(129, 10, 'project-manager-front', 'https://github.com/Viacheslav2005/project-manager-front', '2024-12-05 08:39:26'),
(130, 10, 'Test', 'https://github.com/Viacheslav2005/Test', '2024-12-05 08:39:26'),
(131, 10, 'test1', 'https://github.com/Viacheslav2005/test1', '2024-12-05 08:39:26'),
(132, 10, 'Todo_list', 'https://github.com/Viacheslav2005/Todo_list', '2024-12-05 08:39:26'),
(133, 10, 'Vkusnashka', 'https://github.com/Viacheslav2005/Vkusnashka', '2024-12-05 08:39:26'),
(134, 10, 'Weather', 'https://github.com/Viacheslav2005/Weather', '2024-12-05 08:39:26');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `github_username` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `role` enum('admin','user') COLLATE utf8mb4_unicode_ci DEFAULT 'user',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `avatar` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `skills` text COLLATE utf8mb4_unicode_ci,
  `github_token` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `username`, `email`, `password`, `github_username`, `role`, `created_at`, `updated_at`, `avatar`, `skills`, `github_token`) VALUES
(1, 'Денис1', 'honorxpremium75@gmail.com', '$2b$10$HEJ9i2eWvXv7moRo9Ct51evndRQ/aUNpdrUHuQSGTWhnGgfZeLyqu', NULL, 'user', '2024-11-29 06:23:22', '2024-12-04 04:50:38', NULL, 'PHP, React, JavaScript и тд', NULL),
(2, 'Денис', 'lakos208@gmail.com', '$2b$10$Ulun95o8.YWT2PurRKFD1eAL1Ee06oC4BP92P5KFSJn.j93pMOcoy', 'Denis18UKS', 'user', '2024-12-02 05:36:01', '2024-12-02 05:36:01', NULL, NULL, NULL),
(3, 'Наташа', 'nat@mail.ru', '$2b$10$D3PavHm4LJuzZKNL4ImU0e/dg.EM42thE2Zeib0ExVY9eMy6zdcNS', 'Natalua9', 'user', '2024-12-02 07:12:09', '2024-12-03 22:53:46', '/uploads/avatars/1733266426052-s4mnDH4OCgA.jpg', 'Laravel, php, html, css, bootstrap, вёрстка по макету\r\n\r\n', NULL),
(4, 'Марат', 'marat@mail.ru', '$2b$10$.G74puP.cLm39WDj7RjSSeF9XfhhQui5.X6T3QzxaTr3QO5G6ed72', 'Molin1987', 'user', '2024-12-03 21:16:28', '2024-12-03 21:16:28', NULL, NULL, NULL),
(9, 'test@mail.ru', 'test@mail.ru', '$2b$10$jaNp25TAuXrU1ia.h2LtFOGrsIWIFzcObFBFCC298sXyMmONRal2O', 'OLEEEG', 'user', '2024-12-04 06:01:29', '2024-12-04 06:01:29', NULL, NULL, NULL),
(10, 'Слава', 'slava@mail.ru', '$2b$10$PRR9qxmOYp.6CZFyowvpUOrXnazzTbRU55CkW2cPDoC9udLdqZFT.', 'Viacheslav2005', 'user', '2024-12-05 11:39:25', '2024-12-05 11:41:56', '/uploads/avatars/1733398916438-f3ee38b6-5df0-4004-811a-64bc8b4e11df.jpg', NULL, NULL);

-- --------------------------------------------------------

--
-- Структура таблицы `user_hackathons`
--

CREATE TABLE `user_hackathons` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `hackathon_id` int(11) NOT NULL,
  `joined_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `admin_logs`
--
ALTER TABLE `admin_logs`
  ADD PRIMARY KEY (`id`),
  ADD KEY `admin_id` (`admin_id`);

--
-- Индексы таблицы `chats`
--
ALTER TABLE `chats`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id_1` (`user_id_1`),
  ADD KEY `user_id_2` (`user_id_2`);

--
-- Индексы таблицы `forums`
--
ALTER TABLE `forums`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`);

--
-- Индексы таблицы `forum_answers`
--
ALTER TABLE `forum_answers`
  ADD PRIMARY KEY (`id`),
  ADD KEY `forum_id` (`forum_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Индексы таблицы `hackathons`
--
ALTER TABLE `hackathons`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `messages`
--
ALTER TABLE `messages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `chat_id` (`chat_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Индексы таблицы `repositories`
--
ALTER TABLE `repositories`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`);

--
-- Индексы таблицы `user_hackathons`
--
ALTER TABLE `user_hackathons`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `hackathon_id` (`hackathon_id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `admin_logs`
--
ALTER TABLE `admin_logs`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `chats`
--
ALTER TABLE `chats`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `forums`
--
ALTER TABLE `forums`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT для таблицы `forum_answers`
--
ALTER TABLE `forum_answers`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT для таблицы `hackathons`
--
ALTER TABLE `hackathons`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `messages`
--
ALTER TABLE `messages`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=644;

--
-- AUTO_INCREMENT для таблицы `repositories`
--
ALTER TABLE `repositories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=135;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `user_hackathons`
--
ALTER TABLE `user_hackathons`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `admin_logs`
--
ALTER TABLE `admin_logs`
  ADD CONSTRAINT `admin_logs_ibfk_1` FOREIGN KEY (`admin_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `chats`
--
ALTER TABLE `chats`
  ADD CONSTRAINT `chats_ibfk_1` FOREIGN KEY (`user_id_1`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `chats_ibfk_2` FOREIGN KEY (`user_id_2`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `forums`
--
ALTER TABLE `forums`
  ADD CONSTRAINT `forums_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `forum_answers`
--
ALTER TABLE `forum_answers`
  ADD CONSTRAINT `forum_answers_ibfk_1` FOREIGN KEY (`forum_id`) REFERENCES `forums` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `forum_answers_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `messages`
--
ALTER TABLE `messages`
  ADD CONSTRAINT `messages_ibfk_1` FOREIGN KEY (`chat_id`) REFERENCES `chats` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `messages_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `repositories`
--
ALTER TABLE `repositories`
  ADD CONSTRAINT `repositories_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `user_hackathons`
--
ALTER TABLE `user_hackathons`
  ADD CONSTRAINT `user_hackathons_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_hackathons_ibfk_2` FOREIGN KEY (`hackathon_id`) REFERENCES `hackathons` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
